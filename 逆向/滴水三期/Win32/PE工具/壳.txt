
加壳程序的编写：

          1、 获取Shell程序的路径
          2、获取src程序的路径
          3、将src程序读取到内存中，加密
          4、在Shell程序中新增一个节，并将加密后的src程序再追加到Shell程序的新增节中
          5、加壳程序完毕

解壳过程的编写
          
          1、获取Shell程序的路径

          2、获取 src 的数据

	（1）定位到Shell文件的最后一个节
	（2）将数据取出，并解密

          3、拉伸PE

	     将解密后的PE文件在内存中拉伸，并存储到缓冲区

          4、以挂起方式运行Shell进程
	    
                （1）以挂起形式创建Shell进程，并得到主线程的Context

                （2）卸载外壳程序的文件镜像 (ZwUnmapViewOfSection)

                （3）在指定的位置(src 的ImageBase）申请大小（src的sizeOfImage）的内存（VirtualAllocEx）

                （4）如果创建失败，查看src是否包含重定位表，如果包含重定位表，就在任意位置申请（src的SizeOfImage）大小的内存
	        然后修复重定位表

                （5）如果在指定位置申请内存失败，并且没有重定位表的数据，直接返回失败。
          
                （6）修正运行环境的基础和入口地址
          
                （7）恢复主线程执行          

          
步骤：

	1. 读取主模块的数据

	2. 解密：得到原来的PE文件

	3. 以挂起的形式创建进程：CreateProcess  ： 要创建的进程在哪里？
	    要创建的进程，就是壳子本身！

	4. 获取外壳程序的Context，后面要用

	5. 卸载外壳程序
	
	6. 在指定的位置分配空间：位置就是src 的Image   大小就是src的SizeOfImage
 
	7. 如果成功，将src的PE文件拉伸 复制到该空间

	8. 如果申请空间失败，但有重定位表：在任意位置申请空间，然后将PE文件拉伸、复制、修复重定位表。
	
	9. 如果第6步申请空间失败，并且还没有重定位表，直接返回：失败

	10. 修改外壳程序的  Context：

	      将Context的 ImageBase  改成 src 的ImageBase	      
	      将Context的 OEP  改成 src 的 OEP

	11. 设置Context 并恢复主线程
	 
	12. 终止外壳程序，解壳过程结束
	
	
          
          
          
          
          
          
          
          
          
          

          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          

                    
                    
          

          
                    

          
          
          

          
          
          
                    

          
          
          
          
          

          
          
          
          
          
          

          
          
          
          

          
          
          
          