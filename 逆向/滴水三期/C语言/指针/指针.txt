
赋值：
1、带*类型的变量赋值时只能使用“完整写法”。例： int*  x = （int*）20；
2、带*类型的变量宽度永远是4字节，无论类型是什么，无论有几个* ；

加/减  一个整数：
1、带*类型的变量可以加、减一个整数，但不能乘或除
2、带*类型的变量与其他整数相加或相减时：
	带*类型变量 + N = 带*类型变量 + N*(去掉一个*后类型的宽度）
	带*类型变量 - N = 带*类型变量 - N*(去掉一个*后类型的宽度）
求差值：      
1、两个类型相同的带*类型的变量可以进行减法操作
2、想减的结果要除以掉一个*的数据宽度

++ / --
1、带 * 类型的变量，++ 或者 -- 新增(减少)的数量是去掉一个 * 后变量的宽度

比较：
1、带*的变量，如果类型相同，可以做大小的比较


多级指针

总结：

*(p+i) = p[i]
*( *(p+i)+k) = p[i] [k]
*( *( *(p+i)+k)+j) = p[i] [k] [j]
*( *( *( *(*(p+i)+k)+j)+h)+t) = p[i] [k] [j] [h] [t]

 *( ) 与 [ ] 可以相互转换



1、数组指针的声明：

     类型（*数组名）[宽度] 

例 ： int (*px) [ 1]

2、int *p[5] 与 int (*p)[5]  有什么区别？

原因：
    [ ] 的优先级高于* 所以线组合成p[5] 数组再由int * 说明  数组存储的类型 == int* p[5]
    ( ) 的优先级高于[ ] 所以* 先组合成指针 再由 int [5] 说明数组的宽度
    

1、函数指针的声明：

     返回值类型 （*函数名）（参数表）

例： int  (*pFun) (int, int)

赋值：
  
    pFun = (int (*)(int,int))10;
    pFun = 函数名

使用方式和正常函数一样

另一种常见的表示：

   typedef  int (*pFun)(int, int)

这个不是变量的声明，而是为函数指针起个别名： Fun 相当于函数指针类型

   Fun  p； 

这个才是变量的声明，p 是变量  Fun是类型



















































































 
	