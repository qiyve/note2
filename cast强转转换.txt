C++中四种cast类型强制转换方式

	命名的 强制类型转换 符号的一般形式如下：
	cast-name<type-id>(expression)
其中 cast-name 为 static_cast、dynamic_cast、const_cast和reinterpret_cast之一，type-id为需要转换的目标类型，
而expression是被强制转化的值

1、static_cast：

 Static_cast与C语言式的强制转换实现的功能几近一样、
 用法：static_cast < type-id > ( expression )

主要用法：
	1.用于类层次结构基类（父类）和派生类（子类）之间的指针或者引用的转化
	 上行转换：把子类 指针或引用 转换成父类表示 是安全的
	 下行转换：把父类 指针或引用 转换成子类表示时，由于没有动态类型检测，所以不安全
	2.用于基本数据类型之间的转换，如int转成char，int转成enum。这种转换的安全性也要开发人员来保证
	3.把空指针转换成目标类型的空指针
	4.把任何类型的表达式转换成void类型

注意：static_cast不能转换掉 expression的const、voilatile、或者_unaligned属性


2、const_cast

const_cast将转换掉表达式的const性质
用法：const_cast<type_id> (expression)

该运算符用来修改类型的const或volatile属性。除了const 或volatile修饰之外， type_id和expression的类型是一样的

一、常量指针被转化成非常量的指针，并且仍然指向原来的对象；
二、常量引用被转换成非常量的引用，并且仍然指向原来的对象


3、dynamic_cast
dynamic_cast 支持运行时识别指针或引用所指向的对象。

用法：dynamic_cast<type_id> (expression)

该运算把expression转换成type-id类型的对象。type-id必须是类的指针。类的引用或者void*；

如果type-id是类指针类型那么expression也必须是一个指针，如果type-id是一个引用，那么expression也必须是一个引用

dynamic_cast运算符可以在执行期决定真正的类型。如果downcast是安全的（也就是说，如果父类指针或引用确实指向一个
子类对象）这个运算符会传回适当转型过的指针。如果downcast不安全，这个运算符会传回空指针（也就是说，父类指针或
引用没有指向一个派生类对象）。

dynamic_cast主要用于类层次间的上行转换和下行转换，还可以用于类之间的交叉转换、

在类层次间进行上行转换时，dynamic_cast和static_cast的效果是一样的
在进行下行转换时，dynamic_cast具有类型检查的功能，比static_cast更安全。


4、 reinterpret_cast
interpret是解释的意思，reinterpret即为重新解释。

用法：reinterpret_cast<type_id> (expression)

该运算符把expression重新解释成type-id类型的对象。对象在这里的范围包括变量以及实现类的对象、
此标识符的意思是即为数据的二进制形式重新解释，但是不改变其值

#include <iostream>

int main()
{
	float a = 4624.7613f;
	int b = *reinterpret_cast<int*>(&a);
	printf("%zx\n", b);
}

貌似根C语言的强制转换有点类似

其实不然，C语言的会将一些数值之类的截断等处理，比如浮点转整形，浮点型根整形的保存数据处理方式不同，但经过处理
之后就会变成了截断的数值，而此时如果用reinterpret_cast来转换，他会将那二进制的值重新当作另外一种数据类型来解释的




















































	