树的定义：
 
    有一个(n>=0) 个节点组成的优先集合T，有且仅有一个节点为根（root），当n>1时，
其余的节点分为m(m>=0）个互不相交的有限集合T1，T2，....Tm。每个集合本身
又是棵树，又被称为这个根的子树


数的结构特点：

     非线性结构，有一个直接前驱，但可能有多个直接后继（1:n）
     树的定义具有递归性，树中还有树
     树可以为空，及节点个数为0

若干术语：

     根 —>即根节点（没有前驱）
     叶子—>即终端结点（没有后继）
     森林—>指m棵树不相交的树的集合（例如删除A后的子树个数）
     双亲—>即上层的那个结点（直接前驱）parent
     孩子—>即下层结点的子树（直接后继）child

     结点的度—>节点挂接的子树数（有几个直接后继就是几度）
     树的深度(或高度)—>指所有节点中最大的层数(Max{各结点的层次}）

树的表示法
   
     根作为子树森林组成的表的名字写在表的左边
    例如：中国{河北{保定，石家庄}，广东{广州，东莞}，山东{青岛，济南}}


二叉树概念：

定义:
    n(n>=0)个节点的有限集合，有一个根节点以及两棵树互补相交的、分别成为左子树和右
子树的二叉树组成

逻辑结构：
    一对二（1：2）
   
基本特征：
  
    每个节点最多只有两颗子树（不存在度大于2的结点）
    左子树和右子树次序不能颠倒（有序树）

二叉树性质

     性质1：在二叉树的第i层上至多有2^(i-1） 个结点（i>0)
     性质2：深度为k的二叉树之多有 2^k -1 个结点（k>0)
     性质3：对于任何一颗二叉树，若度为2的结点数有n2个，则叶子数（n0）必定为n2+1（即n0=n2+1）
     性质4：具有n个结点的完全二叉树的深度必为  [ log2n] +1
     性质5：对完全二叉树，若从上至下、从左至右编号，则编号为i的结点，其左孩子编号必为2i，其右孩子编号
                 必为2i+1；其双亲的编号必为  i/2  ( i = 1 时为根，除外）

满二叉树：

      一棵树深度为k且有2^k -1 个结点的二叉树
      特点： 每颗都“充满”了结点

完全二叉树
  
     除了最后一层外，每一层上的节点数均达到最大值；在最后一层上只缺少右边的若干结点。
     总结：k-1层与满二叉树完全相同，第k层结点尽力靠左      

二叉树遍历
 
遍历定义：
      指按某条搜索路线遍访每个节点且不重复（又称周游）
遍历用途：
      他是树结构插入、删除、修改、查找和排序运算的前提，是二叉树一切运算的基础和核心、
遍历方法：
      牢记每一种约定，对每个结点的查看都是“先左后右”。
      限定先左后右，树的遍历有三种实现方案：
      DLR     LDR      LRD

先(根)序遍历     中(根)序遍历       后(根)序遍历
     
DLR — 先序遍历，即先跟在左在右
LDR — 中序遍历，即先左再根在有
LRD — 后续遍历，即先左在右在根

注：“先、中、后”的意思是指访问的结点D是先于子树出现还是后于子树出现
      从递归的角度看，这三种算法是完全相同的，或者说这三种遍历算法的访问
      路径是相同的，只是访问结点的时机不同


如何才能确定一课树

1、通过中序遍历和先序遍历可以确定一棵树
2、通过中序遍历和后序遍历可以确定一棵树
3、通过先序遍历和后续遍历确定不了一棵树

 





