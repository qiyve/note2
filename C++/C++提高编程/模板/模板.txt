 C++提高编程
 
        本阶段主要针对C++泛型编程和STL技术做详细讲解，探讨C++更深层次的使用

1、模板

   1.1 模板的概念

         模板就是建立通用的磨具，大大他提高复用性

         特点：模板不可以直接使用，他只是一个框架

                    模板的通用并不是万能的

  1.2函数模板

         C++另一种编程思想称为泛型编程，主要利用的技术就是模板

         C++提供两种模板机制：函数模板 和 类模板

  1.2.1函数模板语法
 
          函数模板作用：

           建立一个通用函数，其函数返回值类型和形参类型可以不具体指定，用一个
           虚拟的类型 来表示。

          语法 ：template<typename  T>  //函数声明或定义
                      函数

           解释： template --- 声明创建模板

                     typename ---- 表面其后面的符号是一种数据类型，可以用 class 代替

                     T ---- 通用的数据类型，名称也可以替代，通常为大写字母
 
  1.2.2 函数模板注意事项
 
            自动类型推导，必须推导出一致的数据类型T ，才可以使用

            模板必须要确定出T的数据类型，才可以使用

  1.2.3 普通函数与函数模板的区别

           1.普通函数调用时可以发生自动类型转换（隐式类型转换）

           2.函数模板调用时，如果利用自动类型推导，不会发生隐式类型转换

           3.如果利用显示指定函数类型的方式，可以发生隐试类型转换
        
  1.2.4 普通函数与函数模板的调用规则

            1.如果函数模板和普通函数都可以实现，优先调用普通函数

            2.可以通过空模板参数列表来强调调用函数模板

            3.函数模板也可以发生重载

            4.如果函数模板可以产生更好的匹配，优先调用函数模板

  1.2.5 模板的局限性
          
             模板的通用性并不是万能的

             因此C++为了解决这种问题，提供模板的重载，可以为这些特定的类型提供
             具体化的模型

1.3 类模板

     1.3.1 类型模板语法

            作用 ：建立一个通用类，类中的成员数据类型可以不具体指定，用一个虚拟的类型来代表

            语法：  template<typename T> 
                         类

            解释 ： 

                        template ---声明创建模板

                        typenname ---表面其后面的符号是一种数据类型，可以用class代替

                        T  -----通用的数据类型，名称可以替换，通常为大写字母

   1.3.2 类模板与函数模板的区别

               1.类模板没有自动类型推导的使用方式

               2.类模板在模板参数列表中可以有默认参数

   1.3.3 类模板中成员函数创建时机

       类模板中成员函数和普通类中成员函数创建时机是有区别的：

             1. 普通类中的成员函数一开始就可以创建

             2. 类模板中的成员函数在调用时才创建

   1.3.4 类模板对象做函数参数

        学习目标 ：

             类模板实例化出的对象，向函数传数的方式

      一共有三种传入方式：

           1. 指定传入类型 ---直接显示对象的数据类型

           2. 参数模板化    --- 将对象中的参数变为模板进行传递

           3.整个类模板     --- 将这个对象类型 模板化进行传递

   1.3.5 类模板与继承

       当类模板碰到继承时，需要注意一下几点：
       
           1. 当子类继承的父类是一类模板时，子类在声明的时候，需要指定出父类中T的类型

           2. 如果不指定，编译器无法给予子类分配内存   

           3. 如果想灵活指定出父类中 T 的类型，子类也需要变为类模板

   1.3.6 类模板成员函数类外实现

         学习目标：能够掌握类模板中的成员函数类外实现

   1.3.7 类模板分文件编写

        学习目标 ：掌握类模板成员函数分文件编写产生的问题以及解决方式

         问题  ：类模板中成员函数创建时机是在调用阶段，导致分文件编写时链接不到 、

         解决方式： 
    
           1、直接包含 .cpp 源文件

           2、将声明和实现写到同一个文件中，并更改后缀名为 .hpp，hpp是约定的名称，
                 并不是强制

   1.3.8 类模板与友元

           学习目标： 掌握类模板配合友元函数的类内和类外实现

            全局函数类内实现 - 直接在类内声明友元即可

             全局函数类外实现-需要提前让编译器知道全局函数的存在
           
  1.3.9 类模板案例
   
        案例描述：实现一个通用的数组类，要求如下

          1、可以对内置数据类以及自定义数据类型的数据进行存储

          2、将数组中的数据储存到堆区

          3、构造函数可以传入数组的容量

          4、提供对应的拷贝构造函数以及operator=防止浅拷贝问题

          5、提供尾插法和尾删法对数组中的数据进行增加和删除

          6、可以通过下标的方式访问数组中的元素

          7、可以获取数组中当前元素个数和数组的容量
