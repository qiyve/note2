下载VS https://visualstudio.microsoft.com/thank-you-downloading-visual-studio/?sku=community&rel=16&utm_medium=microsoft&utm_source=docs.microsoft.com&utm_campaign=download+from+relnotes&utm_content=vs2019ga+button
勾选 使用C++的桌面开发

1，变量创建的语法；数据类型  变量名 = 变量初始值；
                               例    int   a   =10;
2，常量的定义
     #define 宏常量 ；通常在文件上定义 表示一个常量
    const修饰的变量；修饰该变量为常量 不可修改

3，不能用关键字给变量或者常量起名称

4，输出格式  cout<<"a ="<< a<<endl;

555

5,  标识符命名  ：(1)不能是关键字 (2)只能由字母  数字  下划线组成 ，
                           (3) 第一个字符必须字母或 下划线 _
                           (4)标识符中字母区分大小写（给变量起名做到见名知意）
6，整形  ：short(短整型)，int（整形   常用），long（长整型），long long（长长整形）
              例；short num =10
7，数据类型占用大小可以用sizeof来求出   （sizeof是标识符不是函数）
    语法：sizeof(数据类型/变量） cout<<"整形占用内存空间为：“<<sizeof(short)<<endl;

8.实型（浮点型）作用用于表示小数
           浮点数变量分两种 ：（1）单精度 float   占用4字节  范围7  
                                          （2）双精度 double  占用8     范围15-16  默认情况下输出一个小数会显示6位有效数字

9，科学计数法：  float f2 =3e2;  //3*10^2;      ^：次方
                           float f3 = 3e-2; //3*0.1^2;

10, 字符型  作用；字符型变量用于显示单个字符   语法：char ch = 'a' ;
               注意事项：（1） 在显示字符型变量时用单引号圈起来 不要 用双引号
                                  (2)    单引号内只能有一个字符不可以是字符串
                字符型变量对应ASCII编码   cout<<(int)ch<<endl;    //  a - 97   //  A-65
                c和c++字符型变量站1个内存
                字符型变量并不是把字符本身存入内存中，而是将对应的ASCll 编码放入存储单元

11，转义字符 作用 ;用于表达一些不能显示出来的ASCII字符
                 常用字符   \n (换行LF)    \\ （代表一个反斜线）   
                                  \t(水平制表HT)（跳转到下一个TAB位置）可以整齐的输出数据

12，字符串型  1. c风格 char 变量名[]=”字符串值(字符用单引号)“示例 char str[]="hello warld";
                              注意     （1）  char  字符串名  [ ]   （2）等号后面加双引号包起来字符
                       2.c++风格   string 变量名=”字符串值“                示例 string str1=”hello warld“；
                              注意： （1）  用c++风格字符串时候要加入这个头文件     #include <string> 

13，布尔类型 bool    ： 布尔数据类型代表真或假的值      bool类型占1个字节大小
                       bool 类型有两个值   （1） true --真 （本质是1）   （1）  false  -- 假 （本质0）
                       
14， 数据输入：用于从键盘获取数据     关键字   ( cin )   语法  cin>>变量
             示例 （1） 整型   int a=0；
                                        cout <<"请给整型变量a赋值:”<<endl;
                                        cin>>a；
                                        cout<<"整型变量a=“<<a<<endl; 
         注   ：    bool类型只要非0的值都代表真    

15，运算符：用于执行代码运算    注 ：两个整数相除 结果依然是整数 将小数部分去除
                    （1）两个整数相除除数不能是零  （2）两个小数可以相除

16    （1）取模运算本质就是求  余数  （2）取模运算基于除法 除数不能为零   （3）两个小数不能做取模运算
                 例如 int a =10； int b=5   取模  a%b  = 0

17.   前置 和后置的区别  ：   前置递增（++）  ++a 先让变量加1然后进行表达式运算(a=2; b=++a; b=3;a=3)   前置递减 （--）  反之
                                            后置递增（++）  a++先进行表达式运算，后让变量加1(a=2;b=a++;b=2;a=3)     后置递减 （--）  反之

18，比较运算符  1.相等于（==） 2. 不等于（!=） 3.

19 ,  逻辑运算符：用于表达式的值返回真值或假值  
        运算符  ： 非（ ! ）   { 示例   !a   如果a为假 !a则为真;   a为真则反之  （真变假 假变真）
                        与（&&） 示例   a&&b  如果a和b都为真则结果为真 ，否则反之（同真为真同假为假）
                        或 （ || ）  示例    a||b  如果a和b有一个为真，则结果为真，二者都为假时则为假（同假为假 ）
  20 ，程序流程结构  ：顺序结构：程序按顺数执行不发生跳转
                                    选择结构：依据条件是否满足，有选择的执行的相应功能
                                    循环结构：依据条件是否，循环多次执行某段代码

21   选择结构  单行格式if语句：if（条件）{条件满足执行的语句} if条件后面不要加分号 
                      多行格式if语句：if（条件1）{条件满足执行的语句}else{条件不满足执行的语句};
                      多条件的if语句：if  (条件）{条件满足执行的语句}else if {条件2满足执行的语句}....else{都不满足执行的语句}；

22.  三木运算符：通过三木运算符实现简单的判断 
                 语法： 表达式1 ？表达式2：表达式3         a > b  ? a : b ;
                 解释 ：如果表达式1的值为真，执行表达式2，并返还表达式2的结果
                            如果表达式1的值为假，执行表达式3，并返还表达式3的结果
                           （1）在c++中三木运算符返还的是变量，可以继续赋值
23；switch语句：执行条件分支语句   
                           语法   switch(表达式)
                                   {
                                         case结果1：执行语句；break；
                                         case结果2：执行语句；break； 
                                         ...
                                         default：执行语句；break；
                                   }         
                                         case里如果没写break，那么程序会一直向下执行       
24，if和switch区别？   （1）switch缺点，判断时候只能是整形或者字符型 ，不可以是一个区间
                                   （2）switch优点， 结构清晰 ，执行效率高
25.循环结构  ：满足循环条件，执行循环语句
            语法： while（循环条件){循环语句}   解释  只要循环条件为真就执行循环语句
               注：  在写循环一定要避免死循环出现 （break，可以该关键字来退出当前循环）
26. do....while循环语句与while的区别在于do...while会先循环一次，再判断条件 
            语法 ：do{循环语句}while（循环条件）；
26  for循环语句  语法  for（起始表达式；条件表达式；末尾循环体）{循环语句}
       for循环中的表达式，要用分号（；）分离  
       while，do...while，for都是常用的循环语句，for循环结构比较清晰，比较常用
27，嵌套循环   在循环体中再嵌套一层循环，解决一些实际问题 
                        外层循环执行一次，内层循环执行一周
   
28. 跳转语句  break语句   用于跳转选择结构或者循环结构
       break跳转时机：1. 出现switch条件语句中，作用是终止case并跳出switch
                                 2. 出现在循环语句中 作用是跳出当前循环语句
                                 3. 出现在嵌套循环中 跳出最近的循环语句

                continue语句  在循环语句中，跳过本次循环中余下未执行的语句，继续执行下一次循环

                continue  可以筛选条件，执行到本行，就不在执行后面代码；而执行下一次循环
                 跟break区别  break会退出循环，而continue不会
       go to语句  可以无条件跳转语句 
                语法 ; go to 标记 ； 如果标记名称存在，执行到go to 语句时，会跳转到标记的位置
 
29, 一维数组  ：定义方式 ：1. 数据类型  数组名 [数组长度];
                                          2. 数组类型  数组名  [数组长度] =[值1， 值2 ..... ] （如果在初始化时候，没有全部填写完，
                                                                                                                      会用零来填充)
                                          3. 数组类型  数组名 [  ] = { 值1 ， 值2 ...  }  （定义数组的时候，必须有初始长度)
  数组特点  ；放在一块连续的内存空间中
                     数组中每个元素都是相同数据类型
                     数组的下标是从零开始的，数组名的命名规范与变量命名规范不要一致，不要和变量重名
30，一维数组数组名 ： 可以统计整个数组在内存中的长度
                                     可以获取数组在内存中的首地址
                      数组名是一个常量，不可以赋值
                     计算末尾下标 ： int end = sizeof(arr) / sizeof(arr 0) - 1;
31，冒泡排序 ：最常用的排序算法，对数组内元素排序
                       1，比较相邻的元素，如果第一个比第二个大那么就交换它们；
                       2，对每一对相邻元素做同样的工作，执行完毕后，找到第一个最大值；
                       3，重复以上的步骤，每次比较次数-1直到不需要比较；
          开始冒泡循环              
                        1. 总共排序轮数为 元素个数 - 1
                        2. 内循环对比  次数= 元素个数 -- 当前轮数  -- 1
32，  二维数组  二维数组就是在一维数组上，多加了一个维度
                 定义方式  1，数据类型 数组名[行数]  [列数]；
                                2，数据类型  数组名[行数] [列数] = {{数据1，数据2}；{数据3，数据4}}；
                                3，数据类型  数组名[行数] [列数] = {数据1，数据2， 数据3，数据4}；
                                4，数据类型  数组名 [    ]   [ 列数] = {数据1，数据2，数据3，数据4}；
32， 二维数组数组名  1，  查看二位数组所占内存空间
                                  2，  获取二维数组地址
                                   二位数组 行数计算  sizeof（数组名）/ sizof(数组名[0]）<<endl;
                                                  l列数计算  sizeof（数组名）/sizeof（数组名[0] [0] )<<endl;
                                                   cout << "二维数组的首地址 ："<<(int)arr << endl;
                                     查看一个具体到元素的首地址时 需要加上 一个 &  例如（int）& arr[0] [0]<<endl;
33, 

   41、
  







































