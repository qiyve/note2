2、 STL初识

   2.1 STL的诞生

           长久以来，软件界一直想建立一个可以重复利用的东西

           C++面向对象和泛型编程思想，目的就是复用性的提高

           大多情况下，数据结构和算法都未能有一套标准，导致被迫从事大量重复工作

           为了建立数据结构和算法的一套标准，诞生了STL

   2.2 STL 基本概念

          STL（Standard Template Library. 标准模板库）

          STL从广义上分为：容器(container) 算法 (algorithm) 迭代器 (iterator)

          容器和算法之间通过迭代器进行无缝连接

          STL 几乎所有的代码都采用了模板类或者模板函数

   2.3 STL 六大组件

         STL 大体分为六大组件分别为：
        
                     容器、算法、迭代器、仿函数、 适配器(配接器)、空间配置器

         1. 容器：各种数据结构，如vector、list、deque、set、map、等，用来存放数据

         2. 算法：各种常用的算法，如sort、find、copy、for_each等

         3.迭代器：扮演了容器与算法之间的胶合剂

         4.仿函数：行为类型函数，可作为算法的某种策略
       
         5.适配器：一种用来修饰容器或者仿函数或迭代器接口的东西

         6.空间配置器：负责空间的配置与管理

  2.4 STl 中容器、算法、迭代器
 
     容器：置物之所也

          STL容器就是将运用最广泛的一些数据结构实现出来

          常用的数据结构：数组，链表，数，栈，队列，集合，映射表等

        这些容器分为序列式容器和关联式容器两种：

          序列式容器：强调值得排序，序列式容器中的每个元素均有固定的位置
 
          关联式容器：二叉树结构，各元素之间没有严格的物理上的顺序关系

     算法：问题之解法也

         有限的步骤，解决逻辑或数学上的问题，这一门学科我们叫做算法（Algorithms)

         算法分为：质变算法 和非 质变算法
   
         质变算法：

                是指运算过程中会更改区间内的元素的内容，例如拷贝，替换，删除等等

        非质变算法：
 
               是指运算过程中不会更改区间内的元素的内容，例如查找，计数，遍历，寻找极值等等

   迭代器： 容器和算法之间的胶合剂

         算法 要通过 迭代器 才能访问容器中的元素 

         提供一种方法，使之能够依序访问某个容器所含的各个元素，
         而又无需暴露该容器的内部表示方式

         每个容器都有自己专属的迭代器

         迭代器使用非常类似于指针，初学阶段我们可以先理解迭代器为指针

         常用的容器中迭代器分为 双向迭代器，和随机访问迭代器

         双向迭代器：对写操作，并能向前和向后操作

         随机访问迭代器: 读写操作，可以跳跃式的方式访问任意数据，功能最强大的迭代器

  2.5 容器算法迭代器初识

       STL 中最常用的容器为Vector，可以理解为数组，下面我们将学习如何向这个容器中
       插入数据、并遍历这个容器

   2.5.1 Vector 存放内置数据类型

        容器 ：   vector

        算法 ：   for_each

        迭代器 ：vector<int> : : iterator

  2.5.2 Vector 存放自定义数据类型

       学习目标：vector中存放自定义数据类型，并打印输出

  2.5.3 Vector 容器嵌套容器

       学习目标：容器中嵌套容器，我们将所有的数据进行遍历输出

